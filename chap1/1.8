(define (square x) (* x x))
(define (cube x) (* x x x))

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (large-good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.001))

(define (small-good-enough? guess next-guess)
  (< (/ (abs (- guess next-guess)) guess) 0.001))

(define (cube-root-iter guess x)
  (if (if (< x 1) (small-good-enough? guess (improve guess x)) (large-good-enough? guess x))
      guess
      (cube-root-iter (improve guess x)
                 x)))

(define (cube-root x)
  (cube-root-iter 1.0 x))

(cube-root 0.0000001)
(cube-root 0.0001)
(cube-root 2)
(cube-root 9)
(cube-root 27)
(cube-root 10)
(cube-root 1000000)
(cube-root 100000000000000)
(cube-root 10000000000000000000000000000)
(cube-root 9999999999999999999999999999)
