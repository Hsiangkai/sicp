(define (even? n)
 (= (remainder n 2) 0))

(define (halve n)
 (/ n 2))

(define (fast-mul-iter result a b)
 (cond ((= b 0) result)
       ((even? b) (fast-mul-iter (+ result a a) (+ a a) (- (halve b) 1)))
        (else (fast-mul-iter (+ result a) a (- b 1))))
)

(define (fast-mul a b)
 (fast-mul-iter 0 a b))


(fast-mul 3 0)
(fast-mul 3 1)
(fast-mul 3 2)
(fast-mul 3 3)
(fast-mul 3 4)
(fast-mul 3 5)
(fast-mul 3 6)
(fast-mul 0 3)
(fast-mul 1 3)
(fast-mul 2 3)
(fast-mul 3 3)
(fast-mul 4 3)
(fast-mul 5 3)
(fast-mul 6 3)
