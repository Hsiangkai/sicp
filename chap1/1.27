(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (test-carmichael a n)
 (if (< a n)
   (if (= (expmod a n n) a) (test-carmichael (+ a 1) n) (= 1 0))
   (= 1 1))
)

(prime? 561)
(test-carmichael 1 561)
(prime? 1105)
(test-carmichael 1 1105)
(prime? 1729)
(test-carmichael 1 1729)
(prime? 2465)
(test-carmichael 1 2465)
(prime? 2821)
(test-carmichael 1 2821)
(prime? 6601)
(test-carmichael 1 6601)

