(define (filtered-accumulate combiner null-value term a next b filter)
 (if (> a b)
     null-value
     (combiner (if (filter a) (term a) null-value)
               (filtered-accumulate combiner
                                    null-value
                                    term
                                    (next a)
                                    next
                                    b
                                    filter)))
)

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (if (= n 1) #f
              (= n (smallest-divisor n))))

(define (square x) (* x x))
(define (inc a) (+ a 1))

(define (sum-of-prime-square a b)
 (filtered-accumulate + 0 square a inc b prime?))

(sum-of-prime-square 1 13)

(define (gcd a b)
 (if (= b 0)
  a
  (gcd b (remainder a b))))

(define (identity a) a)

(define (product-of-prime-to n)
 (define (prime-to-n? x) (if (= (gcd x n) 1) #t #f))
 (filtered-accumulate * 1 identity 1 inc n prime-to-n?))

(product-of-prime-to 10)

