(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time)) (= 1 0)))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time)
  (= 1 1))


(timed-prime-test 7)

(define (even? n)
 (= (remainder n 2) 0))

(define (next-odd n)
  (if (even? n) (+ n 1) (+ n 2)))

(define (foo n count)
  (if (> count 0)
    (if (timed-prime-test n) (foo (next-odd n) (- count 1))
                             (foo (next-odd n) count))))

(foo 10000000000 3)
(foo 100000000000 3)
(foo 1000000000000 3)
(foo 10000000000000 3)
