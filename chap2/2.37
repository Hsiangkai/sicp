(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map (lambda(x) (car x)) seqs))
            (accumulate-n op init (map (lambda(x) (cdr x)) seqs)))))

(define (dot-product v w)
 (accumulate + 0 (map * v w)))

(define v (list 1 2 3 4))
(define w (list 5 6 7 8))

(dot-product v w)

(define (matrix-*-vector m v)
  (map (lambda(x) (dot-product x v)) m))

(define m (list (list 2 3 4 5) (list 1 2 3 4) (list 8 5 4 3)))
(define n (list (list 1 2) (list 3 4) (list 5 6) (list 7 8)))

(matrix-*-vector m v)

(define (transpose mat)
  (accumulate-n (lambda(x y) (cons x y)) '() mat))

(transpose m)

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda(x) (map (lambda(y) (dot-product x y)) cols)) m)))

(matrix-*-matrix m n)
