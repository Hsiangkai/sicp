(define (tree-map proc tree)
  (if (null? tree) '()
    (let ((node (car tree)))
      (if (list? node) (cons (tree-map proc node) (tree-map proc (cdr tree)))
                       (cons (proc node) (tree-map proc (cdr tree)))))))

(define (square-tree-v2 tree)
  (tree-map (lambda (x) (* x x)) tree))

(square-tree-v2
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))


