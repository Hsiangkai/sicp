(define (make-point x y)
 (cons x y))

(define (x-point p)
 (car p))

(define (y-point p)
 (cdr p))

(define (make-segment start end)
 (cons start end))

(define (start-segment s)
 (car s))

(define (end-segment s)
 (cdr s))

(define (midpoint-segment s)
 (make-point (/ (+ (x-point (start-segment s)) (x-point (end-segment s))) 2)
             (/ (+ (y-point (start-segment s)) (y-point (end-segment s))) 2)))

(define (print-point p)
 (newline)
 (display "(")
 (display (x-point p))
 (display ",")
 (display (y-point p))
 (display ")"))

(define (make-rectangle s)
 (cons (make-point (x-point (start-segment s)) (y-point (end-segment s)))
   (cons (start-segment s)
     (cons (make-point (x-point (end-segment s)) (y-point (start-segment s)))
         (end-segment s)))))

(define (abs x y)
 (if (> x y) (- x y) (- y x)))

(define (edge-vertical r)
 (make-segment (car r) (car (cdr r))))

(define (edge-horizontal r)
 (make-segment (car (cdr r)) (car (cdr (cdr r)))))

(define (length-segment s)
 (let ((x1 (x-point (start-segment s)))
       (y1 (y-point (start-segment s)))
       (x2 (x-point (end-segment s)))
       (y2 (y-point (end-segment s))))
    (if (= x1 x2) (abs y1 y2) (abs x1 x2))))

(define (perimeter r)
 (* (+ (length-segment (edge-vertical r))
        (length-segment (edge-horizontal r))) 2))

(define (area r)
 (* (length-segment (edge-vertical r)) (length-segment (edge-horizontal r))))

(define start (make-point 3 7))
(define end (make-point 8 21))
(define segment (make-segment start end))
(define rectangle (make-rectangle segment))

(perimeter rectangle)
(area rectangle)
